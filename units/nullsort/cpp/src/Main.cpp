// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_7_main,"Main","main",0xed0e206e,"Main.main","Main.hx",7,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_2_main,"Main","main",0xed0e206e,"Main.main","Main.hx",2,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

void Main_obj::main(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_7_main)
HXLINE(   8)			bool _hx_tmp;
HXDLIN(   8)			if (::hx::IsNotNull( a )) {
HXLINE(   8)				_hx_tmp = ::hx::IsNull( b );
            			}
            			else {
HXLINE(   8)				_hx_tmp = true;
            			}
HXDLIN(   8)			if (_hx_tmp) {
HXLINE(   9)				return 0;
            			}
HXLINE(  10)			return (( (int)(a) ) - ( (int)(b) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_2_main)
HXLINE(   3)		::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(13)->init(0,50)->init(1,10)->init(2,40)->init(3,2)->init(4,5)->init(5,3)->init(6,140)->init(7,120)->init(8,null())->init(9,null())->init(10,null())->init(11,null())->init(12,null());
HXLINE(   7)		list->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(  13)		{
HXLINE(  13)			int _g = 0;
HXDLIN(  13)			while((_g < list->length)){
HXLINE(  13)				 ::Dynamic i = list->__get(_g);
HXDLIN(  13)				_g = (_g + 1);
HXLINE(  14)				::haxe::Log_obj::trace(i,::hx::SourceInfo(HX_("units/nullsort/Main.hx",fb,69,0d,8b),14,HX_("Main",59,64,2f,33),HX_("main",39,38,56,48)));
            			}
            		}
HXLINE(  16)		::Sys_obj::sleep(( (Float)(5) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

